// Code generated by emb.
// sources:
// lua/traceback.lua
// DO NOT EDIT!

package lua

import (
	"bytes"
	"compress/gzip"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _luaTracebackLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\x4d\x8b\xdb\x30\x10\xbd\xe7\x57\x0c\x62\x17\xec\xe0\x35\x49\xe9\x29\xe0\x53\xe9\xb9\x25\xd7\xcd\x46\x28\xf2\xc4\x12\x2b\x8f\x82\x34\x8e\xb7\x94\xfe\xf7\x22\x79\x93\xac\xdb\x94\xfa\x64\xe6\x7d\xcc\x63\x9e\x9c\xd7\xca\x41\xc0\xde\x9f\x51\x6a\x19\x59\xe9\x57\x19\x9d\xe7\x08\x0d\x70\x18\x70\xb1\x38\x0e\xa4\xd9\x7a\x82\x68\xce\xb5\xe4\xa0\x34\x1e\x94\x7e\x2d\xfa\xd8\x55\xc0\x26\xa0\x6a\xcb\x05\x00\xc0\xe4\xd5\x2b\xd6\x06\x1a\xe8\x63\xb7\xc9\xff\x85\xd8\xd7\x4b\x29\xb5\x0f\x7e\x60\x4b\x28\x65\x51\x2f\xcb\x07\x31\x89\xec\xf1\x5d\xc1\x06\x29\x4f\xd2\x17\x90\x87\x40\x13\x92\x87\x48\xed\x85\x3e\xad\x9c\xf3\xfb\xd8\x41\x03\x2d\x1e\x86\xae\xbe\x25\x9c\x98\x15\xe4\xa4\x9f\xa6\x7d\xe8\x22\xfe\x47\x36\xa3\x7f\xd8\xfb\xe3\x84\x09\x2b\xa1\x69\x40\x44\x0e\x96\x3a\x01\x8a\xda\xfb\xe7\xbb\x93\x2f\x9d\xa4\x8b\xc3\xa1\x10\x3b\xda\xf1\xe3\xf3\x97\xc7\x97\xcd\xf3\x7e\x47\x2f\x4b\x51\x81\x10\xe5\x15\xcc\x3e\x70\x4d\xb4\x79\x98\xf0\x59\xa2\xf7\x6b\xff\x69\xcc\x89\x9a\xf0\xdb\x7d\x73\x6f\xbd\xb2\x24\x47\x4b\xad\x1f\xe7\xd1\x4e\x5a\x39\x57\x5c\x4a\x2e\xca\x2b\x70\x5b\x32\x5a\x82\x06\x54\x3f\x73\xb9\xc7\xab\x20\x35\x3f\x5a\xaa\x4f\xf6\x0d\x9d\x1c\x6d\xcb\xa6\xfa\x30\x30\x68\x3b\xc3\x33\x69\x02\xb5\x43\x15\xa4\xf6\xce\x07\x68\xe0\x8c\xfa\x73\xb1\xaa\x60\x55\xc1\xba\x82\x75\xf9\x17\x3d\x6a\x24\x9c\x12\x1d\x2c\xb5\x3f\xbf\xa7\x13\x28\x36\xb5\x0f\x6c\x7c\x92\x8e\x59\x6d\x2a\x78\xca\x0e\xbf\x66\x16\xe9\xdb\x27\x31\x07\x45\xd1\x29\xc6\x62\x9d\xd8\xf0\x04\xeb\x55\xf9\x0f\x2a\xbe\x71\x21\xbe\x6e\xb7\xdf\xb6\x9b\x1d\x89\xba\xce\x8f\x24\x27\x5d\x4f\x31\xd3\x9e\x0a\x84\xc3\x63\xae\x80\xfd\x49\xdc\xbc\x90\xda\x79\x7b\x97\x07\x1e\xbb\x45\x1a\xfd\x0e\x00\x00\xff\xff\xbe\x0a\x0b\xcf\x87\x03\x00\x00")

func luaTracebackLuaBytes() ([]byte, error) {
	return bindataRead(
		_luaTracebackLua,
		"lua/traceback.lua",
	)
}

func luaTracebackLua() (*asset, error) {
	bytes, err := luaTracebackLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lua/traceback.lua", size: 903, mode: os.FileMode(436), modTime: time.Unix(1495113531, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var ResourceFS *bindataFS = &bindataFS{
	prefix: "",
	tree:   _bintree,
	data:   _bindata,
}

type bindataFS struct {
	prefix string
	tree   *bintree
	data   bindata
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func (b *bindataFS) Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := b.data[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func (b *bindataFS) MustAsset(name string) []byte {
	a, err := b.Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func (b *bindataFS) AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := b.data[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func (b *bindataFS) AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

type bindata map[string]func() (*asset, error)

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = bindata{
	"lua/traceback.lua": luaTracebackLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func (b *bindataFS) AssetDir(name string) ([]string, error) {
	node := b.tree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"lua": &bintree{nil, map[string]*bintree{
		"traceback.lua": &bintree{luaTracebackLua, map[string]*bintree{}},
	}},
}}

func (b *bindataFS) HasAsset(requested string) (string, bool) {
	for _, filename := range b.AssetNames() {
		if path.Base(filename) == requested {
			return filename, true
		}
	}
	return "", false
}

func (b *bindataFS) AssetHttp(requested string) (http.File, error) {
	if has, ok := b.HasAsset(requested); ok {
		f, err := b.open(has)
		return f, err
	}
	return nil, errors.New(fmt.Sprintf("Asset %!s(MISSING) unavailable", requested))
}

func (b *bindataFS) open(name string) (http.File, error) {
	name = path.Join(b.prefix, name)
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	if children, err := b.AssetDir(name); err == nil {
		return NewAssetDirectory(name, children, b), nil
	}
	bf, err := b.Asset(name)
	if err != nil {
		return nil, err
	}
	return NewAssetFile(name, bf), nil
}

type AssetDirectory struct {
	AssetFile
	ChildrenRead int
	Children     []os.FileInfo
}

func NewAssetDirectory(name string, children []string, fs *bindataFS) *AssetDirectory {
	fileinfos := make([]os.FileInfo, 0, len(children))
	for _, child := range children {
		_, err := fs.AssetDir(filepath.Join(name, child))
		fileinfos = append(fileinfos, &FakeFile{child, err == nil, 0})
	}
	return &AssetDirectory{
		AssetFile{
			bytes.NewReader(nil),
			ioutil.NopCloser(nil),
			FakeFile{name, true, 0},
		},
		0,
		fileinfos}
}

func (f *AssetDirectory) Readdir(count int) ([]os.FileInfo, error) {
	if count <= 0 {
		return f.Children, nil
	}
	if f.ChildrenRead+count > len(f.Children) {
		count = len(f.Children) - f.ChildrenRead
	}
	rv := f.Children[f.ChildrenRead : f.ChildrenRead+count]
	f.ChildrenRead += count
	return rv, nil
}

func (f *AssetDirectory) Stat() (os.FileInfo, error) {
	return f, nil
}

type AssetFile struct {
	*bytes.Reader
	io.Closer
	FakeFile
}

func NewAssetFile(name string, content []byte) *AssetFile {
	return &AssetFile{
		bytes.NewReader(content),
		ioutil.NopCloser(nil),
		FakeFile{name, false, int64(len(content))},
	}
}

func (f *AssetFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, errors.New("not a directory")
}

func (f *AssetFile) Size() int64 {
	return f.FakeFile.Size()
}

func (f *AssetFile) Stat() (os.FileInfo, error) {
	return f, nil
}

type FakeFile struct {
	Path string
	Dir  bool
	Len  int64
}

func (f *FakeFile) Name() string {
	_, name := filepath.Split(f.Path)
	return name
}

func (f *FakeFile) Mode() os.FileMode {
	mode := os.FileMode(0644)
	if f.Dir {
		return mode | os.ModeDir
	}
	return mode
}

func (f *FakeFile) ModTime() time.Time {
	return time.Unix(0, 0)
}

func (f *FakeFile) Size() int64 {
	return f.Len
}

func (f *FakeFile) IsDir() bool {
	return f.Mode().IsDir()
}

func (f *FakeFile) Sys() interface{} {
	return nil
}

// RestoreAsset restores an asset under the given directory
func (b *bindataFS) RestoreAsset(dir, name string) error {
	data, err := b.Asset(name)
	if err != nil {
		return err
	}
	info, err := b.AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// RestoreAssets restores an asset under the given directory recursively
func (b *bindataFS) RestoreAssets(dir, name string) error {
	children, err := b.AssetDir(name)
	// File
	if err != nil {
		return b.RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = b.RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}
